# Отладка тестов через Python Debugger


# Тестируемый код
# ---------->

# test_pdb.py
# Импортируйте модуль pdb.
import pdb


# # Вариант функции с ошибкой
# def integers_counter(data):
#     # Создаем счётчик для целых чисел.
#     integers_found = 0
#     # Перебираем в цикле элементы входного списка.
#     for item in data:
#         # Если элемент - целое число, то увеличиваем счётчик.
#         if isinstance(item, int):
#             integers_found += 1
#     # Возвращаем счётчик.
#     return integers_found


# Исправленный вариант функции
def integers_counter(data):
    integers_found = 0
    for item in data:
        if not isinstance(item, bool) and isinstance(item, int):
            integers_found += 1
    return integers_found


# Тесты
# ---------->

# # Вариант теста с отладкой через pdb
# def test_counter():
#     # Произвольные данные для анализа.
#     data = [False, 1.0, "some_string", 3, True, 1, [], False]
#     pdb.set_trace()  # Точка останова. Именно отсюда начнём дебаг.
#     # Вызываем функцию:
#     integers = integers_counter(data)
#     # Целых чисел должно быть 2.
#     assert integers == 2


# Вариант теста после проведения отладки
def test_counter():
    data = [False, 1.0, "some_string", 3, True, 1, [], False]
    integers = integers_counter(data)
    assert integers == 2



# Команды терминала
# ---------->

# Чтобы войти в режим отладки при работе с pytest, можно:
# 1) Запустить тесты с ключом --pdb. При таком вызове pdb будет
# останавливать работу кода на строках, непосредственно спровоцировавших
# ошибку. Выполнение файла test_pdb.py остановится на строке с assert,
# но такое поведение дебаггера ничем не поможет в поиске ошибки.
# 2) Запустить тесты с ключом --trace. При таком варианте pdb будет вызываться
# в начале каждого теста. Запускать в этом режиме успешные тесты не имеет
# смысла, поэтому лучше комбинировать --trace с другими ключами, например
# pytest --trace --lf -x. При такой комбинации ключей в режиме дебаггера
# будет запущен первый упавший тест, и после окончания теста выполнение
# будет остановлено.
# 3) Можно установить точку останова (breakpoint) непосредственно в коде
# теста. Для этого требуется импортировать модуль pdb и перед нужной
# строкой поставить инструкцию: pdb.set_trace(). А можно вызвать
# встроенную функцию breakpoint(), которая по умолчанию
# вызывает pdb.set_trace() (но также может быть переопределена на другой отладчик).
# При вызове breakpoint() импортировать pdb не нужно.

# Чтобы увидеть в терминале информацию из print() в успешно пройденных
# тестах — можно применить ключ -rP. Но у ключа -r есть и другие варианты, их
# можно найти в документации или в справке прямо в терминале: для этого нужно
# выполнить команду pytest -h или pytest --help.



# # Самостоятельное задание
# # ---------->

# # Скопируйте в test_pdb.py код (ниже)

# import pdb

# def transform_list(x):
#     x.append(1)
#     x.extend([2, 3])
#     return x


# def test_list():
#     a = []
#     # pdb.set_trace() # этот метод тоже использовал
#     a = transform_list(a)
#     a = [4] + a
#     assert a == [1, 2, 3, 4] 

# # Задание
# # Выполните для этого файла все три способа запуска отладки тестов:
# # pytest --pdb
# # pytest --trace
# # Установите breakpoint через pdb.set_trace() и «погуляйте» по программе.

# # Самостоятельное задание выполнено!
# # ----------<


